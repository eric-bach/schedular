type Data @model @aws_cognito_user_pools {
  pk: String
  sk: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  type: String
  duration: Int
  status: String
  customer: String
  firstName: String
  lastName: String
  email: String
  phone: Int
}

input CustomerInput {
  name: String
  email: String
  phone: String
}

input BookingInput {
  pk: String!
  sk: String!
  customer: CustomerInput!
}

input LastEvaluatedKey {
  pk: ID
  sk: String
}

type LastEvaluatedKeyViewModel {
  pk: ID
  sk: String
}

type AppointmentViewModel {
  pk: String
  sk: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  type: String
  duration: Int
  status: String
  customer: String
}

type GetAppointmentsResponse {
  items: [AppointmentViewModel]
  lastEvaluatedKey: LastEvaluatedKeyViewModel
}

type BookAppointmentResponse {
  pk: ID
  sk: String
  confirmationId: String
  status: String
  customerName: String
  customerEmail: String
  customerPhone: String
  updatedAt: AWSDateTime
}

# GraphQL actions
type Query {
  getAvailableAppointments(date: String!, lastEvaluatedKey: LastEvaluatedKey): GetAppointmentsResponse
    @aws_cognito_user_pools(cognito_groups: ["Users", "Admins"])
  getAppointments(date: String!, lastEvaluatedKey: LastEvaluatedKey): GetAppointmentsResponse
    @aws_cognito_user_pools(cognito_groups: ["Admins"])
}

type Mutation {
  bookAppointment(bookingInput: BookingInput): BookAppointmentResponse @aws_cognito_user_pools(cognito_groups: ["Users", "Admins"])
}

schema {
  query: Query
  mutation: Mutation
}
