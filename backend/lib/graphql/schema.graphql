input LastEvaluatedKey {
  pk: ID
  sk: AWSDateTime
}

type LastEvaluatedKeyViewModel {
  pk: ID!
  sk: AWSDateTime!
}

# UpsertAppointments
input AdministratorDetailsInput {
  id: String!
  firstName: String!
  lastName: String!
}
input UpsertAppointmentInput {
  pk: ID!
  sk: AWSDateTime!
  status: String!
  type: String!
  category: String!
  duration: Int!
  administratorDetails: AdministratorDetailsInput
}
input UpsertAppointmentsInput {
  appointments: [UpsertAppointmentInput]
}

# CreateBooking
input CustomerInput {
  id: String!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
}
input AppointmentInput {
  duration: Int!
  type: String!
  category: String!
}
input AdministratorInput {
  id: String!
  firstName: String!
  lastName: String!
}
input CreateBookingInput {
  pk: String!
  sk: AWSDateTime!
  customer: CustomerInput!
  appointmentDetails: AppointmentInput!
  administratorDetails: AdministratorInput!
}

# CancelBooking
input AppointmentDetailsInput {
  pk: String!
  sk: String!
  status: String!
  type: String!
  category: String!
  duration: Int!
}
input CancelBookingInput {
  bookingId: String!
  appointmentDetails: AppointmentDetailsInput!
}

# CreateBooking, CancelBooking response
type BookingResponse {
  pk: String!
  sk: AWSDateTime!
  type: String!
  administratorDetails: AdministratorDetailsViewModel!
  appointmentDetails: AppointmentDetailsViewModel!
  customerId: String
  customerDetails: CustomerDetailsViewModel
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# GetAppointments, GetAvailableAppointments
type AdministratorDetailsViewModel {
  id: String
  firstName: String
  lastName: String
}
type CustomerDetailsViewModel {
  id: String
  firstName: String
  lastName: String
  email: String!
  phone: String!
}
type AppointmentViewModel {
  pk: String!
  sk: AWSDateTime!
  status: String!
  type: String!
  category: String!
  duration: Int!
  administratorDetails: AdministratorDetailsViewModel
  bookingId: String
  customerDetails: CustomerDetailsViewModel
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
type GetAppointmentsResponse {
  items: [AppointmentViewModel]
  lastEvaluatedKey: LastEvaluatedKeyViewModel
}

# GetAppointment
type GetAppointmentResponse {
  pk: String!
  sk: AWSDateTime!
  status: String!
  type: String!
  category: String!
  duration: Int!
  administratorId: String!
  administratorDetails: AdministratorDetailsViewModel
  bookingId: String
  customerDetails: CustomerDetailsViewModel
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# GetBookings
type AppointmentDetailsViewModel {
  pk: String!
  sk: AWSDateTime!
  type: String!
  category: String!
  status: String!
  duration: Int!
}
type BookingsViewModel {
  pk: String!
  sk: AWSDateTime!
  type: String!
  appointmentDetails: AppointmentDetailsViewModel!
  administratorDetails: AdministratorDetailsViewModel!
  customerId: String!
  customerDetails: CustomerDetailsViewModel!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
type GetBookingsResponse {
  items: [BookingsViewModel]
  lastEvaluatedKey: LastEvaluatedKeyViewModel
}

# GetBooking
type GetBookingResponse {
  pk: String!
  sk: AWSDateTime!
  type: String!
  appointmentDetails: AppointmentDetailsViewModel!
  administratorDetails: AdministratorDetailsViewModel!
  customerId: String!
  customerDetails: CustomerDetailsViewModel!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# GraphQL actions
type Query {
  getAvailableAppointments(from: String!, to: String!, lastEvaluatedKey: LastEvaluatedKey): GetAppointmentsResponse
    @aws_auth(cognito_groups: ["Users", "Admins"])
  getAppointment(pk: String!, sk: String!): GetAppointmentResponse @aws_auth(cognito_groups: ["Users", "Admins"])
  getAppointments(from: String!, to: String!, lastEvaluatedKey: LastEvaluatedKey): GetAppointmentsResponse @aws_auth(cognito_groups: ["Admins"])
  getBooking(pk: String!, sk: String!): GetBookingResponse @aws_auth(cognito_groups: ["Users", "Admins"])
  getBookings(customerId: String!, datetime: String!, lastEvaluatedKey: LastEvaluatedKey): GetBookingsResponse @aws_auth(cognito_groups: ["Users", "Admins"])
}

type Mutation {
  upsertAppointments(input: UpsertAppointmentsInput): GetAppointmentResponse @aws_auth(cognito_groups: ["Admins"])
  createBooking(input: CreateBookingInput): BookingResponse @aws_auth(cognito_groups: ["Users", "Admins"])
  cancelBooking(input: CancelBookingInput): BookingResponse @aws_auth(cognito_groups: ["Users", "Admins"])
}

type Subscription {
  onCancelBooking: BookingResponse @aws_subscribe(mutations: ["cancelBooking"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
